apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  creationTimestamp: null
  labels:
    machineconfiguration.openshift.io/role: master
  name: 99-static-pod-check-workaround-master
spec:
  config:
    ignition:
      version: 3.2.0
    storage:
      files:
      - contents:
          source: data:text/plain;charset=utf-8;base64,
        mode: 484
        overwrite: true
        path: /usr/local/bin/static-pod-check-workaround.sh
        user:
          name: root
    systemd:
      units:
      - contents: '[Unit]

          Description=Check for stuck static pod revisions

          After=kubelet.service


          [Service]

          Type=simple

          User=root

          ExecStart=/usr/local/bin/static-pod-check-workaround.sh -v --max-failures
          30


          [Install]

          WantedBy=multi-user.target

          '
        enabled: true
        name: static-pod-check-workaround.service
